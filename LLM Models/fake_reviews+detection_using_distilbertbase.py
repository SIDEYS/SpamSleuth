# -*- coding: utf-8 -*-
"""Fake_reviews+detection_using_DistilBertBase

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/sideys/fake-reviews-detection-using-distilbertbase.15e15637-347e-4194-81ba-d98230ac3722.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250619/auto/storage/goog4_request%26X-Goog-Date%3D20250619T140508Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D2c33328cf58191e6fa0d4cd08fd9be7eecb80c38f22a6157f4ba0565b31189289883233a822cc5ad15b5d8b303c5a8a3de5ad5b5f25d905f74ce6367c4674367ce3315bbeed72a09e1671885eebcf70b91d625cb76d9b9afb16e3f641c74ab80883d93c104463a1c7d10aba0b7fcc8873d5471ff1608e353c6d23b02959771054bc7c449a5fea1c5da6b0724653cd27c90022b2dfc9a6a4af76f5d9f4bbcc98849126b758f59067602e8c1e859a226a47b65cc1063394bf26d9eb510d6debad3aa2d720cbc0d88a44ac9a697010e717c32bcb6939be7c96987fc447ea0f15476b59aa7670858ed5bdb35cba9521b4f7dc3a551eaf20d1253d71abd1987a76954
"""

# IMPORTANT: SOME KAGGLE DATA SOURCES ARE PRIVATE
# RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES.
import kagglehub
kagglehub.login()

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.

sideys_fake_reviewss_path = kagglehub.dataset_download('sideys/fake-reviewss')

print('Data source import complete.')

# This Python 3 environment comes with many helpful analytics libraries installed
# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python
# For example, here's several helpful packages to load

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)

# Input data files are available in the read-only "../input/" directory
# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using "Save & Run All"
# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session

!pip install datasets evaluate

from datasets import DatasetDict, Dataset
from transformers import AutoTokenizer, AutoModelForSequenceClassification, TrainingArguments, Trainer
import numpy as np
import evaluate
from datasets import load_dataset
from transformers import DataCollatorWithPadding

dataset_dict = load_dataset('csv', data_files='/kaggle/input/fake-reviewss/fake_review.csv')

tokenizer_name = "distilbert-base-uncased"
model_name = "distilbert-base-uncased"
id2label = {0: "FAKE", 1: "REAL"}
label2id = {"FAKE": 0, "REAL": 1}

tokenizer = AutoTokenizer.from_pretrained(tokenizer_name)
model = AutoModelForSequenceClassification.from_pretrained(model_name, num_labels=2, id2label=id2label, label2id=label2id)

dataset_dict = dataset_dict["train"].train_test_split(test_size=0.2, seed=42)
train_dataset = dataset_dict["train"]
test_dataset = dataset_dict["test"]

train_dataset = train_dataset.filter(lambda x: x['text'] is not None)
test_dataset =  test_dataset.filter(lambda x: x['text'] is not None)

def tokenize_function(examples):
    return tokenizer(examples['text'], padding="max_length", truncation=True)

encoded_train_dataset = train_dataset.map(tokenize_function, batched=True)
encoded_test_dataset = test_dataset.map(tokenize_function, batched=True)

encoded_train_dataset = encoded_train_dataset.rename_column("label", "labels")
encoded_train_dataset.set_format("torch", columns=["input_ids", "attention_mask", "labels"])

encoded_test_dataset = encoded_test_dataset.rename_column("label", "labels")
encoded_test_dataset.set_format("torch", columns=["input_ids", "attention_mask", "labels"])

# Data collator for dynamic padding
data_collator = DataCollatorWithPadding(tokenizer=tokenizer)

!pip install torch

import torch

import os
os.environ["WANDB_MODE"] = "disabled"
import wandb
wandb.init(mode="disabled")

# prompt: generate compute metrics for the collab model using classification report

import numpy as np
from sklearn.metrics import classification_report

# Define the metric
metric = evaluate.load("accuracy")

# Define a function to compute metrics
def compute_metrics(eval_pred):
    logits, labels = eval_pred
    predictions = np.argmax(logits, axis=-1)
    return metric.compute(predictions=predictions, references=labels)

# Training arguments
training_args = TrainingArguments(
    output_dir="./results",
    per_device_train_batch_size=8,
    per_device_eval_batch_size=8,
    num_train_epochs=5,
    evaluation_strategy="epoch",
    save_strategy="epoch",
    load_best_model_at_end=True,
    push_to_hub=False,
)

# Create Trainer instance
trainer = Trainer(
    model=model,
    args=training_args,
    train_dataset=encoded_train_dataset,
    eval_dataset=encoded_test_dataset,
    data_collator=data_collator,
    compute_metrics=compute_metrics,
)

# Train the model
trainer.train()

# Make predictions on the test set
predictions = trainer.predict(encoded_test_dataset)

# Get predicted labels
predicted_labels = np.argmax(predictions.predictions, axis=1)

# Get true labels
true_labels = predictions.label_ids

# Generate classification report
print(classification_report(true_labels, predicted_labels, target_names=['FAKE', 'REAL']))

# prompt: generate confusion matrix

from sklearn.metrics import confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Generate confusion matrix
cm = confusion_matrix(true_labels, predicted_labels)

# Plot confusion matrix
plt.figure(figsize=(5, 4))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=['FAKE', 'REAL'], yticklabels=['FAKE', 'REAL'])
plt.xlabel("Predicted Label")
plt.ylabel("True Label")
plt.title("Confusion Matrix")
plt.show()

# import wandb
# wandb.login(key="b7459d2d1cad50b1b2f3388aa0792a3495511f1d")